{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this;\n\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport LogBox from \"react-native-web/dist/exports/LogBox\";\nimport React, { useState } from \"react\";\nimport Title from \"../UI/Title\";\nimport { GameOverScreen } from \"./GameOverScreen\";\nimport NumberContainer from \"../components/NumberContainer\";\nimport PrimaryButton from \"../UI/PrimaryButton\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar navigate = useNavigate();\nvar minBoundary = 1;\nvar maxBoundary = 100;\n\nfunction generateRandomBetween(min, max) {\n  var rndNum = Math.floor(Math.random() * (max - min)) + min;\n  return rndNum;\n}\n\nvar GameScreen = function GameScreen(_ref) {\n  var value_entered = _ref.value_entered,\n      GameOver = _ref.GameOver;\n  var initialGuess = generateRandomBetween(1, 100, value_entered);\n\n  var _useState = useState(initialGuess),\n      _useState2 = _slicedToArray(_useState, 2),\n      currGuess = _useState2[0],\n      setCurrGuess = _useState2[1];\n\n  var currValue = initialGuess;\n\n  function nextGuessHandler(direction) {\n    if (direction == \"lower\" && value_entered > maxBoundary || direction == \"higher\" && value_entered < minBoundary) {\n      Alert.alert(\"Alert Title\", \"You have cheated in the game\", [{\n        text: \"Sorry!\",\n        style: \"cancel\"\n      }]);\n      return;\n    }\n\n    if (direction == \"lower\") {\n      maxBoundary = currGuess;\n      currValue = generateRandomBetween(minBoundary, currGuess - 1);\n    } else {\n      minBoundary = currGuess;\n      currValue = generateRandomBetween(currGuess + 1, maxBoundary);\n    }\n\n    if (currValue == value_entered) {\n      Alert.alert(\"Alert Title\", \"Huh I won Bitch\", [{\n        text: \"Fine!!!!\",\n        onPress: function onPress() {\n          navigate(_jsx(GameOverScreen, {}));\n        },\n        style: \"destructive\"\n      }]);\n    }\n\n    setCurrGuess(currValue);\n  }\n\n  return _jsxs(View, {\n    style: styles.screen,\n    children: [_jsx(Title, {\n      titleText: \"Opponent's Guess\"\n    }), _jsx(NumberContainer, {\n      Guessed_Number: currGuess\n    }), _jsxs(View, {\n      children: [_jsx(Text, {\n        children: \"Higher or Lower\"\n      }), _jsxs(View, {\n        style: {\n          flexDirection: \"row\"\n        },\n        children: [_jsx(PrimaryButton, {\n          onPress: nextGuessHandler.bind(_this, \"lower\"),\n          children: \"-\"\n        }), _jsx(PrimaryButton, {\n          onPress: nextGuessHandler.bind(_this, \"higher\"),\n          children: \"+\"\n        })]\n      })]\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    padding: 10,\n    marginTop: 60\n  }\n});\nexport default GameScreen;","map":{"version":3,"names":["React","useState","Title","GameOverScreen","NumberContainer","PrimaryButton","navigate","useNavigate","minBoundary","maxBoundary","generateRandomBetween","min","max","rndNum","Math","floor","random","GameScreen","value_entered","GameOver","initialGuess","currGuess","setCurrGuess","currValue","nextGuessHandler","direction","Alert","alert","text","style","onPress","styles","screen","flexDirection","bind","StyleSheet","create","flex","padding","marginTop"],"sources":["C:/Users/absol/OneDrive/Desktop/starting-project/React Native GuessGame/screens/GameScreen.js"],"sourcesContent":["import { StyleSheet, View, Text, Alert, LogBox } from \"react-native\";\r\nimport React, { useState } from \"react\";\r\nimport Title from \"../UI/Title\";\r\nimport {GameOverScreen} from './GameOverScreen'\r\nimport NumberContainer from \"../components/NumberContainer\";\r\nimport PrimaryButton from \"../UI/PrimaryButton\";\r\n\r\nconst navigate=useNavigate();\r\nlet minBoundary = 1;\r\nlet maxBoundary = 100;\r\nfunction generateRandomBetween(min, max) {\r\n  const rndNum = Math.floor(Math.random() * (max - min)) + min;\r\n\r\n  return rndNum;\r\n}\r\n\r\nconst GameScreen = ({value_entered , GameOver,}) => {\r\n  const initialGuess = generateRandomBetween(1, 100, value_entered);\r\n  const [currGuess, setCurrGuess] = useState(initialGuess);\r\n  let currValue = initialGuess;\r\n\r\n  function nextGuessHandler(direction) {\r\n    if (\r\n      (direction == \"lower\" && value_entered > maxBoundary) ||\r\n      (direction == \"higher\" && value_entered < minBoundary)\r\n    ) {\r\n      Alert.alert(\"Alert Title\", \"You have cheated in the game\", [\r\n        { text: \"Sorry!\", style: \"cancel\" },\r\n      ]);\r\n      return;\r\n    }\r\n    if (direction == \"lower\") {\r\n      maxBoundary = currGuess;\r\n      currValue = generateRandomBetween(minBoundary, currGuess - 1);\r\n    } else {\r\n      minBoundary = currGuess;\r\n      currValue = generateRandomBetween(currGuess + 1, maxBoundary);\r\n    }\r\n    if (currValue == value_entered)\r\n    {\r\n    Alert.alert(\"Alert Title\",\"Huh I won Bitch\", [{\r\n      text: \"Fine!!!!\",\r\n      onPress: () => {navigate(<GameOverScreen />)},\r\n      style: \"destructive\",\r\n    }]);\r\n  }\r\n    setCurrGuess(currValue);\r\n    \r\n   \r\n  }\r\n  return (\r\n    <View style={styles.screen}>\r\n      <Title titleText=\"Opponent's Guess\"></Title>\r\n      <NumberContainer Guessed_Number={currGuess}></NumberContainer>\r\n      <View>\r\n        <Text>Higher or Lower</Text>\r\n        <View style={{ flexDirection: \"row\" }}>\r\n          <PrimaryButton onPress={nextGuessHandler.bind(this, \"lower\")}>\r\n            -\r\n          </PrimaryButton>\r\n          <PrimaryButton onPress={nextGuessHandler.bind(this, \"higher\")}>\r\n            +\r\n          </PrimaryButton>\r\n        </View>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\nconst styles = StyleSheet.create({\r\n  screen: {\r\n    flex: 1,\r\n    padding: 10,\r\n    marginTop: 60,\r\n  },\r\n});\r\n\r\nexport default GameScreen;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}